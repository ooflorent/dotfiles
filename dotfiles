#!/usr/bin/env bash

# Definitions
# -----------

defs() {
  if is_mac; then
    group "Install tools" install_mac_tools
    group "Install applications" install_mac_apps
  fi

  group "Link dotfiles" link_dotfiles
  group "Update environment" update_env
}

install_mac_tools() {
  brew_tap "homebrew/dupes"

  brew_install "grep"
  brew_install "openssh"
  brew_install "git"
  brew_install "ruby"
  brew_install "tig"
  brew_install "tree"
  brew_install "wget"
  brew_install "zsh"
}

install_mac_apps() {
  brew_tap "caskroom/cask"
  brew_tap "caskroom/fonts"
  brew_tap "caskroom/versions"

  brew_install "brew-cask"

  cask_install "iterm2"
  cask_install "google-chrome"
  cask_install "spectacle"
  cask_install "sublime-text3"
}

link_dotfiles() {
  link "git/gitattribute"
  link "git/gitconfig"
  link "git/gitignore"
  link "shell/curlrc"
  link "shell/inputrc"
  link "shell/wgetrc"
}

update_env() {
  local zsh_location=$(which zsh)

  if is_mac; then
    # Add ZSH to the acceptable shells
    if ! grep -Fxq "$zsh_location" /etc/shells; then
      echo "$zsh_location" | sudo tee -a /etc/shells
    fi
  fi

  # Set ZSH as the default shell
  oexe "sudo chsh -s ${zsh_location} ${USER}" "Set ZSH as the default shell"
}

# OS
# --

is_mac()   { [[ $OSTYPE == darwin* ]] ;}
is_linux() { [[ $OSTYPE == linux-gnu ]] ;}

ask_for_sudo() {
  sudo -v
  while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &
}

invalidate_sudo() {
  sudo -k
}

# Program
# -------

readonly _PROGNAME=$(basename $0)
readonly _PROGDIR=$(cd "$(dirname $0)" && pwd)
readonly _ARGS="$@"

declare _FORCE=1
declare _INTERACTIVE=1
declare _USAGE=1

opts() {
  local args=()
  local arg

  for arg; do
    case "$arg" in
      -f|--force)       args=($args "-f") ;;
      -i|--interactive) args=($args "-i") ;;
      -h|--help)        args=($args "-h") ;;
      *)                args=($args "$arg") ;;
    esac
  done

  set -- "${args[@]}"
  while getopts "fih" OPTION; do
    case $OPTION in
      f) _FORCE=0 ;;
      i) _INTERACTIVE=0 ;;
      *) _USAGE=0 ;;
    esac
  done

  if [ $_USAGE -eq 0 ]; then
    usage
    exit
  fi
}

usage() {
  cat <<EOF
Usage: ${_PROGNAME} [options]
Options:
  -f  override existing files
  -i  prompt before every group and important change
  -h  show this help
EOF
}

group() {
  local group_name=$1
  local run_defs=$2

  ohead "$group_name"

  if [ $_INTERACTIVE -eq 0 ]; then
    if ! oconfirm "Continue"; then
      return 1
    fi
  fi

  $run_defs
}

# Colors & modes
# --------------

readonly bold=$(tput bold)
readonly reset=$(tput sgr0)

readonly black=$(tput setaf 0)
readonly red=$(tput setaf 1)
readonly green=$(tput setaf 2)
readonly yellow=$(tput setaf 3)
readonly blue=$(tput setaf 4)
readonly magenta=$(tput setaf 5)
readonly cyan=$(tput setaf 6)
readonly white=$(tput setaf 7)

# Output
# ------

oexe() {
  local out="${2:-$1}"
  local res

  owait "$out"
  
  $1 &> /dev/null
  res=$?

  printf "\r"
  ores $res "${out}"
}

ores() {
  [ $1 -eq 0 ] && odone "$2" || ofail "$2"
}

ohead() { echo -e "\n${bold}$1${reset}" ;}
odone() { echo -e " ${bold}${green}✔${reset}  $1" ;}
ofail() { echo -e " ${bold}${red}✖${reset}  $1" ;}
oskip() { echo -e " ${bold}${yellow}➜${reset}  $1" ;}
owait() { echo -en " ${bold}${blue}❊${reset}  $1" ;}

oconfirm() {
  echo -ne "$@? (y/n) "
  read -n 1
  printf "\n"

  [[ "$REPLY" =~ ^[Yy]$ ]]
}

oprompt() {
  echo -ne "$@ "
  read
}

# File system
# -----------

exists() { [[ -f "$1" || -d "$1" || -L "$1" ]] ;}
ln_s() { ln -s "$1" "$2" &> /dev/null ;}
rm_f() { rm -f "$1" &> /dev/null ;}

link() {
  local src="$1"
  local dst="${2:-.$(basename $1)}"

  local full_src="${_PROGDIR}/${src}"
  local full_dst="${HOME}/${dst}"

  if exists "$full_dst"; then
    if [[ $_INTERACTIVE = 0 ]]; then
      if oconfirm " ${bold}${blue}❊${reset}  Overwrite ${bold}${full_dst}${reset}"; then
        rm_f "$full_dst"
      else
        return 1
      fi
    elif [ $_FORCE -eq 0 ]; then
      rm_f "$full_dst"
    fi
  fi

  oexe "ln -s ${full_src} ${full_dst}" "${dst} ${bold}→${reset} ${src}"
}

# Homebrew
# --------

is_formula_installed() {
  [ $(brew list "$1" &> /dev/null; printf $?) -eq 0 ]
}

is_cask_installed() {
  [ $(brew cask list "$1" &> /dev/null; printf $?) -eq 0 ]
}

brew_tap() {
  oexe "brew tap $1"
}

brew_install() {
  if is_formula_installed "$1"; then
    oexe "brew upgrade $1"
  else
    oexe "brew install $@"
  fi
}

cask_install() {
  if is_cask_installed "$1"; then
    oskip "brew cask install $1"
  else
    oexe "brew cask install $1"
  fi
}

# Main
# ----

# Process arguments
opts $_ARGS

# Request administrator's privileges
ask_for_sudo
trap invalidate_sudo EXIT

# Install definitions
defs
